# syntax=docker/dockerfile:1

ARG RUBY_VERSION=3.2.2
FROM docker.io/library/ruby:${RUBY_VERSION}-slim

WORKDIR /app

# 必要パッケージ（開発用）
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y \
      build-essential git curl libpq-dev libyaml-dev \
      node-gyp pkg-config python-is-python3 libvips postgresql-client \
    && rm -rf /var/lib/apt/lists /var/cache/apt/archives

# Node & Yarn（corepack経由）
ARG NODE_VERSION=20.19.5
ARG YARN_VERSION=3.8.7
ENV PATH=/usr/local/node/bin:$PATH
RUN curl -sL https://github.com/nodenv/node-build/archive/master.tar.gz | tar xz -C /tmp/ && \
    /tmp/node-build-master/bin/node-build "${NODE_VERSION}" /usr/local/node && \
    rm -rf /tmp/node-build-master
RUN corepack enable && yarn set version $YARN_VERSION

# RubyGems/bundle
ENV BUNDLE_PATH="/usr/local/bundle"

# 依存インストール（キャッシュ分割）
COPY Gemfile Gemfile.lock ./
RUN bundle install
# アプリ本体（全体）
COPY . .

# package.json が無い新規プロジェクト向け: js/css bundling をインストール
RUN bash -lc 'if [ ! -f package.json ]; then bin/rails javascript:install:esbuild --force && bin/rails css:install:tailwind --force; fi'

# 依存インストール（yarn.lockが無い場合にも対応）
RUN yarn install --immutable || yarn install

EXPOSE 3000
CMD ["bash", "-lc", "bin/rails db:prepare && bin/dev"]
